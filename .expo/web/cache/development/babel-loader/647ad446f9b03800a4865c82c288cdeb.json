{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from \"react\";\nimport MultiSlider from \"@ptomasroos/react-native-multi-slider\";\nimport { COLORS } from \"../../config/colors\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction TwoPointSlider(_ref) {\n  var values = _ref.values,\n      min = _ref.min,\n      max = _ref.max,\n      preFix = _ref.preFix,\n      postFix = _ref.postFix,\n      _onValueChange = _ref.onValueChange;\n  var screenwidth = Dimensions.get('window').width;\n  var screenheight = Dimensions.get('window').height;\n  return _jsx(MultiSlider, {\n    values: values,\n    sliderLength: screenwidth - 68,\n    min: min,\n    max: max,\n    step: 1,\n    markerOffsetY: 20,\n    selectedStyle: {\n      backgroundColor: COLORS.primary\n    },\n    trackStyle: {\n      height: 10,\n      borderRadius: 10,\n      backgroundColor: COLORS.secondary\n    },\n    minMarkerOverlapDistance: 50,\n    customMarker: function customMarker(e) {\n      return _jsxs(View, {\n        style: {\n          height: 60,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [_jsx(View, {\n          style: _objectSpread({\n            height: 30,\n            width: 30,\n            borderRadius: 15,\n            borderWidth: 4,\n            borderColor: COLORS.white,\n            backgroundColor: COLORS.primary\n          }, styles.shadow)\n        }), _jsxs(Text, {\n          style: {\n            marginTop: 6,\n            color: COLORS.primary,\n            fontWeight: 'bold',\n            fontSize: 18,\n            textAlign: 'center',\n            width: 100\n          },\n          children: [preFix, e.currentValue, postFix]\n        })]\n      });\n    },\n    onValueChange: function onValueChange(values) {\n      return _onValueChange(values);\n    }\n  });\n}\n\nvar styles = StyleSheet.create({\n  shadow: {\n    shadowColor: COLORS.black,\n    shadowOffset: {\n      width: 0,\n      height: 3\n    },\n    shadowRadius: 1,\n    shadowOpacity: 0.1\n  }\n});\nexport default TwoPointSlider;","map":{"version":3,"sources":["C:/Users/Admin/Documents/bensamirWork/react-native/mushtryati/components/inputs/TwoPointSlider.js"],"names":["React","MultiSlider","COLORS","TwoPointSlider","values","min","max","preFix","postFix","onValueChange","screenwidth","Dimensions","get","width","screenheight","height","backgroundColor","primary","borderRadius","secondary","e","alignItems","justifyContent","borderWidth","borderColor","white","styles","shadow","marginTop","color","fontWeight","fontSize","textAlign","currentValue","StyleSheet","create","shadowColor","black","shadowOffset","shadowRadius","shadowOpacity"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAQC,WAAR,MAAyB,uCAAzB;AACA,SAASC,MAAT;;;;;;;;AAKA,SAASC,cAAT,OAAgF;AAAA,MAApDC,MAAoD,QAApDA,MAAoD;AAAA,MAA5CC,GAA4C,QAA5CA,GAA4C;AAAA,MAAvCC,GAAuC,QAAvCA,GAAuC;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,MAA1BC,OAA0B,QAA1BA,OAA0B;AAAA,MAAjBC,cAAiB,QAAjBA,aAAiB;AAC5E,MAAIC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA3C;AACA,MAAIC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA5C;AACA,SACI,KAAC,WAAD;AACI,IAAA,MAAM,EAAGX,MADb;AAEI,IAAA,YAAY,EAAGM,WAAW,GAAG,EAFjC;AAGI,IAAA,GAAG,EAAEL,GAHT;AAII,IAAA,GAAG,EAAEC,GAJT;AAKI,IAAA,IAAI,EAAE,CALV;AAMI,IAAA,aAAa,EAAE,EANnB;AAOI,IAAA,aAAa,EAAE;AACXU,MAAAA,eAAe,EAAEd,MAAM,CAACe;AADb,KAPnB;AAUI,IAAA,UAAU,EAAE;AACRF,MAAAA,MAAM,EAAE,EADA;AAERG,MAAAA,YAAY,EAAC,EAFL;AAGRF,MAAAA,eAAe,EAAEd,MAAM,CAACiB;AAHhB,KAVhB;AAeI,IAAA,wBAAwB,EAAE,EAf9B;AAgBI,IAAA,YAAY,EAAE,sBAACC,CAAD,EAAM;AAChB,aACI,MAAC,IAAD;AACA,QAAA,KAAK,EAAE;AACHL,UAAAA,MAAM,EAAC,EADJ;AAEHM,UAAAA,UAAU,EAAE,QAFT;AAGHC,UAAAA,cAAc,EAAE;AAHb,SADP;AAAA,mBAQI,KAAC,IAAD;AACA,UAAA,KAAK;AACAP,YAAAA,MAAM,EAAC,EADP;AAEAF,YAAAA,KAAK,EAAC,EAFN;AAGAK,YAAAA,YAAY,EAAC,EAHb;AAIAK,YAAAA,WAAW,EAAC,CAJZ;AAKAC,YAAAA,WAAW,EAAEtB,MAAM,CAACuB,KALpB;AAMAT,YAAAA,eAAe,EAAEd,MAAM,CAACe;AANxB,aAOGS,MAAM,CAACC,MAPV;AADL,UARJ,EAsBI,MAAC,IAAD;AACJ,UAAA,KAAK,EAAE;AACHC,YAAAA,SAAS,EAAC,CADP;AAEHC,YAAAA,KAAK,EAAC3B,MAAM,CAACe,OAFV;AAGHa,YAAAA,UAAU,EAAE,MAHT;AAIHC,YAAAA,QAAQ,EAAC,EAJN;AAKHC,YAAAA,SAAS,EAAE,QALR;AAMHnB,YAAAA,KAAK,EAAC;AANH,WADH;AAAA,qBAYCN,MAZD,EAYSa,CAAC,CAACa,YAZX,EAYyBzB,OAZzB;AAAA,UAtBJ;AAAA,QADJ;AAuCH,KAxDL;AAyDI,IAAA,aAAa,EAAE,uBAACJ,MAAD;AAAA,aAAWK,cAAa,CAACL,MAAD,CAAxB;AAAA;AAzDnB,IADJ;AA8DH;;AACD,IAAMsB,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC7BR,EAAAA,MAAM,EAAC;AACHS,IAAAA,WAAW,EAAElC,MAAM,CAACmC,KADjB;AAEHC,IAAAA,YAAY,EAAE;AACVzB,MAAAA,KAAK,EAAE,CADG;AAEVE,MAAAA,MAAM,EAAE;AAFE,KAFX;AAMHwB,IAAAA,YAAY,EAAC,CANV;AAOHC,IAAAA,aAAa,EAAC;AAPX;AADsB,CAAlB,CAAf;AAWA,eAAerC,cAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport  MultiSlider from \"@ptomasroos/react-native-multi-slider\";\r\nimport { COLORS } from \"../../config/colors\";\r\nimport { View, StyleSheet, Dimensions, Text } from \"react-native\";\r\n\r\n\r\n\r\nfunction TwoPointSlider  ({ values, min, max, preFix, postFix, onValueChange }) {\r\n    let screenwidth = Dimensions.get('window').width;\r\n    let screenheight = Dimensions.get('window').height;\r\n    return (\r\n        <MultiSlider\r\n            values ={values}\r\n            sliderLength ={screenwidth - 68 }\r\n            min={min}\r\n            max={max}\r\n            step={1}\r\n            markerOffsetY={20}\r\n            selectedStyle={{\r\n                backgroundColor: COLORS.primary,\r\n            }} \r\n            trackStyle={{\r\n                height: 10,\r\n                borderRadius:10,\r\n                backgroundColor: COLORS.secondary,\r\n            }}\r\n            minMarkerOverlapDistance={50}\r\n            customMarker={(e)=> {\r\n                return (\r\n                    <View\r\n                    style={{\r\n                        height:60,\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n\r\n                    }}\r\n                    >\r\n                        <View\r\n                        style={{\r\n                             height:30,\r\n                             width:30,\r\n                             borderRadius:15,\r\n                             borderWidth:4,\r\n                             borderColor: COLORS.white,\r\n                             backgroundColor: COLORS.primary,\r\n                             ...styles.shadow\r\n\r\n                        }}\r\n                        >\r\n\r\n                        </View>\r\n                        <Text\r\n                    style={{\r\n                        marginTop:6,\r\n                        color:COLORS.primary,\r\n                        fontWeight: 'bold',\r\n                        fontSize:18,\r\n                        textAlign: 'center',\r\n                        width:100\r\n\r\n                    }}\r\n                    \r\n                    >\r\n                        {preFix}{e.currentValue}{postFix}\r\n                    </Text>\r\n                    </View>\r\n                )\r\n            }}\r\n            onValueChange={(values)=> onValueChange(values)}\r\n        />\r\n\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    shadow:{ \r\n        shadowColor: COLORS.black,\r\n        shadowOffset: { \r\n            width: 0,\r\n            height: 3\r\n        },\r\n        shadowRadius:1,\r\n        shadowOpacity:0.1\r\n    }\r\n})\r\nexport default TwoPointSlider;"]},"metadata":{},"sourceType":"module"}